// <auto-generated />
using System;
using DarAlforsan.Data.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DarAlforsan.Data.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.AboutSchool", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("AddressAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DetailsAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DetailsEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegisterationUrl")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WhatsAppNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("AboutSchool");
                });

            modelBuilder.Entity("Models.Branch", b =>
                {
                    b.Property<long>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BranchID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BranchID");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Models.ContactUs", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Models.News", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailsAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DetailsEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Imgs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Models.Resource", b =>
                {
                    b.Property<long>("ResourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ResourceID"));

                    b.Property<string>("LatinValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocalValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("ModuleID")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ResourceID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Models.ResourceModule", b =>
                {
                    b.Property<long>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ModuleID"));

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ModuleID");

                    b.ToTable("ResourceModule");
                });

            modelBuilder.Entity("Models.SaidAboutUs", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MessageAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MessageEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("SaidAboutUs");
                });

            modelBuilder.Entity("Models.SchoolFruits", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.ToTable("SchoolFruits");
                });

            modelBuilder.Entity("Models.SchoolFruitsDetails", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long>("FruitsID")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.HasIndex("FruitsID");

                    b.ToTable("SchoolFruitsDetails");
                });

            modelBuilder.Entity("Models.SchoolSystem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("MessageAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MessageEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("SchoolSystem");
                });

            modelBuilder.Entity("Models.SchoolVision", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("MessageAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MessageEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("SchoolVision");
                });

            modelBuilder.Entity("Models.Slider", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("DetailsAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DetailsEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("Models.SocialMedia", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("Models.Statistics", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Models.ThemeLogin", b =>
                {
                    b.Property<long>("ThemeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ThemeID"));

                    b.Property<string>("BGImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ForeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LogoImgPadding")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LogoImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SideImgPadding")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SideImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.HasKey("ThemeID");

                    b.ToTable("ThemeLogin");
                });

            modelBuilder.Entity("Models.UILanguage", b =>
                {
                    b.Property<long>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LanguageID"));

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ISOLanguageName")
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageID");

                    b.ToTable("UILanguage");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserID"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime");

                    b.Property<long>("BranchID")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceID")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Ishidden")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LatinName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxPeriodCountInDay")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SignatureFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UILanguageID")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int>("UserClassRepeated")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VClassUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("BranchID");

                    b.HasIndex("UILanguageID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Models.Resource", b =>
                {
                    b.HasOne("Models.ResourceModule", "ResourceModule")
                        .WithMany("Resources")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceModule");
                });

            modelBuilder.Entity("Models.SchoolFruitsDetails", b =>
                {
                    b.HasOne("Models.SchoolFruits", "Fruits")
                        .WithMany("FruitsDetails")
                        .HasForeignKey("FruitsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fruits");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UILanguage", "UILanguage")
                        .WithMany("Users")
                        .HasForeignKey("UILanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("UILanguage");
                });

            modelBuilder.Entity("Models.Branch", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.ResourceModule", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Models.SchoolFruits", b =>
                {
                    b.Navigation("FruitsDetails");
                });

            modelBuilder.Entity("Models.UILanguage", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
